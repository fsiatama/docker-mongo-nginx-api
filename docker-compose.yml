version: '3.4'

x-mongodb-service: &mongodb-service
  image: mongo:latest
  restart: unless-stopped
  networks:
    - mongors-network
  environment:
    MONGODB_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
    MONGODB_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    MONGODB_DB: ${MONGO_DATABASE}
    MONGODB_USER: ${MONGO_USER}
    MONGODB_PASSWORD: ${MONGO_PASSWORD}

services:
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    image: backend-api
    container_name: backend-api
    restart: always
    tty: true
    depends_on:
      - mongodb-config
      - elasticsearch
    environment:
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET}
      BACKEND_API_PORT: ${BACKEND_API_PORT}
      MONGO_DSN: ${MONGO_DSN}
      ELASTICSEARCH_NODE: ${ELASTICSEARCH_NODE}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
    networks:
      - mongors-network
      - elastic
      - code-network
  web-server:
    image: nginx:latest
    container_name: web-server
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web-server/000-default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    depends_on:
      - backend-api
    networks:
      - code-network
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - TAKE_FILE_OWNERSHIP=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - ELASTIC_USER=${ELASTICSEARCH_USERNAME}
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - target: 9200
        published: 9200
    networks:
      - elastic
      
  mongodb1:
    <<: *mongodb-service
    entrypoint: [ "/usr/bin/mongod", "--bind_ip", "localhost,mongodb1" , "--replSet", "dbrs" ]
    hostname: mongodb1
    container_name: mongodb1
    ports:
      - 27017:27017
    volumes:
      - "./db/data/mongodb1:/data/db"
      
  mongodb2:
    <<: *mongodb-service
    entrypoint: [ "/usr/bin/mongod", "--bind_ip", "localhost,mongodb2" , "--replSet", "dbrs" ]
    hostname: mongodb2
    container_name: mongodb2
    depends_on:
      - mongodb1    
    ports:
      - 27018:27017
    volumes:
      - "./db/data/mongodb2:/data/db"
  mongodb3:
    <<: *mongodb-service
    entrypoint: [ "/usr/bin/mongod", "--bind_ip", "localhost,mongodb3" , "--replSet", "dbrs" ]
    hostname: mongodb3
    container_name: mongodb3
    depends_on:
      - mongodb1    
    ports:
      - 27019:27017
    volumes:
      - "./db/data/mongodb3:/data/db"
  mongodb-config:
    image: mongo:latest
    container_name: mongodb-config
    environment:
      MONGODB_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGODB_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGODB_DB: ${MONGO_DATABASE}
      MONGODB_USER: ${MONGO_USER}
      MONGODB_PASSWORD: ${MONGO_PASSWORD}
    restart: "no"
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
    networks:
      - mongors-network
    volumes:
      - "./db/init/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro"
    entrypoint: ["bash", "-c", "bash /docker-entrypoint-initdb.d/mongo-init.sh", "/usr/bin/mongod", "--bind_ip", "localhost,mongodb-config"]
  

volumes:
  mongodb-data:
  elasticsearch-data:
    driver: local

networks:
  code-network:
    driver: bridge
  mongors-network:
    driver: bridge
  elastic:
    name: elastic
    driver: bridge  
